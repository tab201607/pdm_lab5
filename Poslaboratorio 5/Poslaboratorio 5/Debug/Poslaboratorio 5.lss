
Poslaboratorio 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004ea  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800102  00800102  00000580  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e26  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000865  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098d  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  000026d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000328  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  9e:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	}
}

void initADC(void) //Funcion para inicializar el ADC
{
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0); //conectamos a AVcc
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); // Justificado a la izquierda
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
	ADCSRA |= (0b00000111); //Prescaler de 128
  ce:	80 81       	ld	r24, Z
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <setup>:
uint8_t ADCChannel = 6;


void setup(void)
{
	cli();
  d6:	f8 94       	cli
	
	CLKPR = (0b10000000); // habilitamos cambios del prescale
  d8:	e1 e6       	ldi	r30, 0x61	; 97
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	80 83       	st	Z, r24
	CLKPR = (0x03); // Colocamos prescaler de 8
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	80 83       	st	Z, r24


	initPWM0Fake(0, 255, 50, 1); // activamos el timer 0 en pwm falso
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	42 e3       	ldi	r20, 0x32	; 50
  ea:	6f ef       	ldi	r22, 0xFF	; 255
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 1b 02 	call	0x436	; 0x436 <initPWM0Fake>
	initPWM1FastTopA(reset, no_invertido, 8, 2499); //activamos el timer 1 en modo pwm
  f2:	23 ec       	ldi	r18, 0xC3	; 195
  f4:	39 e0       	ldi	r19, 0x09	; 9
  f6:	48 e0       	ldi	r20, 0x08	; 8
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 64 01 	call	0x2c8	; 0x2c8 <initPWM1FastTopA>
	initPWM2FastB(reset, no_invertido, 128); // Activamos el timer 2 en modo pwm
 102:	40 e8       	ldi	r20, 0x80	; 128
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 b9 01 	call	0x372	; 0x372 <initPWM2FastB>

	DDRD = 0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	8a b9       	out	0x0a, r24	; 10
	
	//UCSR0B = 0; // Deshablitamos serial en D0 y D1
	
	initADC();
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	sei();
 116:	78 94       	sei
 118:	08 95       	ret

0000011a <convertADC>:
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
	ADCSRA |= (0b00000111); //Prescaler de 128
}

void convertADC(char channel) //Funcion para leer info ADC
{	ADMUX &= ~(0x0F); // Borramos los ultimos 4 bits de ADMUX
 11a:	ec e7       	ldi	r30, 0x7C	; 124
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	90 7f       	andi	r25, 0xF0	; 240
 122:	90 83       	st	Z, r25
	
	if (channel > 8) {channel = 8;} //valor maximo es 8
 124:	89 30       	cpi	r24, 0x09	; 9
 126:	08 f0       	brcs	.+2      	; 0x12a <convertADC+0x10>
 128:	88 e0       	ldi	r24, 0x08	; 8
	
	if (channel < 6) {DIDR0 = channel;}
 12a:	86 30       	cpi	r24, 0x06	; 6
 12c:	10 f4       	brcc	.+4      	; 0x132 <convertADC+0x18>
 12e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	ADMUX |= channel; // seleccionamos el canal correcto
 132:	ec e7       	ldi	r30, 0x7C	; 124
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 81       	ld	r25, Z
 138:	89 2b       	or	r24, r25
 13a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // iniciamos el ADC
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <main>:
	sei();
}

int main(void)
{
	setup();
 148:	0e 94 6b 00 	call	0xd6	; 0xd6 <setup>
	updateDutyCycle1A(150);
 14c:	86 e9       	ldi	r24, 0x96	; 150
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 65 02 	call	0x4ca	; 0x4ca <updateDutyCycle1A>
	updateDutyCycle2B(10);
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <updateDutyCycle2B>
	while (1)
	{
		ADCChannel = 5; //iniciamos el ADC convirtiendo el canal 5
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		convertADC(ADCChannel);
 160:	0e 94 8d 00 	call	0x11a	; 0x11a <convertADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	87 ea       	ldi	r24, 0xA7	; 167
 166:	91 e6       	ldi	r25, 0x61	; 97
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x20>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x26>
 16e:	00 00       	nop
		_delay_ms(100);
		
		ADCChannel = 6; //iniciamos el ADC convirtiendo el canal 6
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		convertADC(ADCChannel);
 176:	0e 94 8d 00 	call	0x11a	; 0x11a <convertADC>
 17a:	87 ea       	ldi	r24, 0xA7	; 167
 17c:	91 e6       	ldi	r25, 0x61	; 97
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x36>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x3c>
 184:	00 00       	nop
		_delay_ms(100);
		
		ADCChannel = 7; //iniciamos el ADC convirtiendo el canal 6
 186:	87 e0       	ldi	r24, 0x07	; 7
 188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		convertADC(ADCChannel);
 18c:	0e 94 8d 00 	call	0x11a	; 0x11a <convertADC>
 190:	87 ea       	ldi	r24, 0xA7	; 167
 192:	91 e6       	ldi	r25, 0x61	; 97
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x4c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x52>
 19a:	00 00       	nop
 19c:	de cf       	rjmp	.-68     	; 0x15a <main+0x12>

0000019e <__vector_21>:
	
	ADMUX |= channel; // seleccionamos el canal correcto
	ADCSRA |= (1<<ADSC); // iniciamos el ADC
}

ISR(ADC_vect){
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	if (ADCChannel == 5) {ADCResultServo1 = ADCH + 65;}
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c4:	85 30       	cpi	r24, 0x05	; 5
 1c6:	51 f4       	brne	.+20     	; 0x1dc <__vector_21+0x3e>
 1c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	8f 5b       	subi	r24, 0xBF	; 191
 1d0:	9f 4f       	sbci	r25, 0xFF	; 255
 1d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADCResultServo1+0x1>
 1d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCResultServo1>
 1da:	11 c0       	rjmp	.+34     	; 0x1fe <__vector_21+0x60>
	else if (ADCChannel == 6) {ADCResultServo2 = ADCH/8 + 7;}
 1dc:	86 30       	cpi	r24, 0x06	; 6
 1de:	49 f4       	brne	.+18     	; 0x1f2 <__vector_21+0x54>
 1e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1e4:	86 95       	lsr	r24
 1e6:	86 95       	lsr	r24
 1e8:	86 95       	lsr	r24
 1ea:	89 5f       	subi	r24, 0xF9	; 249
 1ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADCResultServo2>
 1f0:	06 c0       	rjmp	.+12     	; 0x1fe <__vector_21+0x60>
	else if (ADCChannel == 7) {ADCResultLED = ADCH;}
 1f2:	87 30       	cpi	r24, 0x07	; 7
 1f4:	21 f4       	brne	.+8      	; 0x1fe <__vector_21+0x60>
 1f6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	ADCSRA |= (1<<ADIF);
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 61       	ori	r24, 0x10	; 16
 206:	80 83       	st	Z, r24
	
	updateDutyCycle1A(ADCResultServo1);
 208:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCResultServo1>
 20c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADCResultServo1+0x1>
 210:	0e 94 65 02 	call	0x4ca	; 0x4ca <updateDutyCycle1A>
	updateDutyCycle2B(ADCResultServo2);
 214:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADCResultServo2>
 218:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <updateDutyCycle2B>
	updateDutyCycleFake(ADCResultLED);
 21c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 220:	0e 94 6d 02 	call	0x4da	; 0x4da <updateDutyCycleFake>
	
	return;
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
	fakePWMcounter++;
 258:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <fakePWMcounter>
 25c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <fakePWMcounter+0x1>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <fakePWMcounter+0x1>
 266:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fakePWMcounter>
	TCNT0 = 255 - fakePWMtimertop; // reiniciamos el timer
 26a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <fakePWMtimertop>
 26e:	80 95       	com	r24
 270:	86 bd       	out	0x26, r24	; 38
	
	if (fakePWMcounter == fakePWMtop) {
 272:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <fakePWMcounter>
 276:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <fakePWMcounter+0x1>
 27a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <fakePWMtop>
 27e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <fakePWMtop+0x1>
 282:	28 17       	cp	r18, r24
 284:	39 07       	cpc	r19, r25
 286:	39 f4       	brne	.+14     	; 0x296 <__vector_16+0x50>
		fakePWMcounter = 0; // reiniciamos el counter externo
 288:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fakePWMcounter+0x1>
 28c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fakePWMcounter>
		PORTB |= (1<<PORTB5); // encendemos el pin
 290:	85 b1       	in	r24, 0x05	; 5
 292:	80 62       	ori	r24, 0x20	; 32
 294:	85 b9       	out	0x05, r24	; 5
	}
	
	if (fakePWMcounter == fakePWMduty) {
 296:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <fakePWMcounter>
 29a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <fakePWMcounter+0x1>
 29e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <fakePWMduty>
 2a2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <fakePWMduty+0x1>
 2a6:	28 17       	cp	r18, r24
 2a8:	39 07       	cpc	r19, r25
 2aa:	19 f4       	brne	.+6      	; 0x2b2 <__vector_16+0x6c>
	PORTB &= ~(1<<PORTB5); //Apagamos el pin
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	8f 7d       	andi	r24, 0xDF	; 223
 2b0:	85 b9       	out	0x05, r24	; 5
	}
	
	TIFR0 |= TOV0;
 2b2:	85 b3       	in	r24, 0x15	; 21
 2b4:	85 bb       	out	0x15, r24	; 21
}
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <initPWM1FastTopA>:
void updateDutyCycle1A(uint16_t duty) {
	OCR1A = duty;
}

void updateDutyCycle2A(uint8_t duty) {
	OCR2A = duty;
 2c8:	94 b1       	in	r25, 0x04	; 4
 2ca:	92 60       	ori	r25, 0x02	; 2
 2cc:	94 b9       	out	0x04, r25	; 4
 2ce:	88 23       	and	r24, r24
 2d0:	21 f0       	breq	.+8      	; 0x2da <initPWM1FastTopA+0x12>
 2d2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 2d6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 2da:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
 2de:	e0 e8       	ldi	r30, 0x80	; 128
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	80 68       	ori	r24, 0x80	; 128
 2e6:	80 83       	st	Z, r24
 2e8:	66 23       	and	r22, r22
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <initPWM1FastTopA+0x2a>
 2ec:	80 81       	ld	r24, Z
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	80 83       	st	Z, r24
 2f2:	e0 e8       	ldi	r30, 0x80	; 128
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8a 61       	ori	r24, 0x1A	; 26
 2fa:	80 83       	st	Z, r24
 2fc:	40 34       	cpi	r20, 0x40	; 64
 2fe:	51 05       	cpc	r21, r1
 300:	e1 f0       	breq	.+56     	; 0x33a <initPWM1FastTopA+0x72>
 302:	38 f4       	brcc	.+14     	; 0x312 <initPWM1FastTopA+0x4a>
 304:	41 30       	cpi	r20, 0x01	; 1
 306:	51 05       	cpc	r21, r1
 308:	61 f0       	breq	.+24     	; 0x322 <initPWM1FastTopA+0x5a>
 30a:	48 30       	cpi	r20, 0x08	; 8
 30c:	51 05       	cpc	r21, r1
 30e:	79 f0       	breq	.+30     	; 0x32e <initPWM1FastTopA+0x66>
 310:	26 c0       	rjmp	.+76     	; 0x35e <initPWM1FastTopA+0x96>
 312:	41 15       	cp	r20, r1
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	58 07       	cpc	r21, r24
 318:	b1 f0       	breq	.+44     	; 0x346 <initPWM1FastTopA+0x7e>
 31a:	41 15       	cp	r20, r1
 31c:	54 40       	sbci	r21, 0x04	; 4
 31e:	c9 f0       	breq	.+50     	; 0x352 <initPWM1FastTopA+0x8a>
 320:	1e c0       	rjmp	.+60     	; 0x35e <initPWM1FastTopA+0x96>
 322:	e1 e8       	ldi	r30, 0x81	; 129
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	80 83       	st	Z, r24
 32c:	1d c0       	rjmp	.+58     	; 0x368 <initPWM1FastTopA+0xa0>
 32e:	e1 e8       	ldi	r30, 0x81	; 129
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	82 60       	ori	r24, 0x02	; 2
 336:	80 83       	st	Z, r24
 338:	17 c0       	rjmp	.+46     	; 0x368 <initPWM1FastTopA+0xa0>
 33a:	e1 e8       	ldi	r30, 0x81	; 129
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	83 60       	ori	r24, 0x03	; 3
 342:	80 83       	st	Z, r24
 344:	11 c0       	rjmp	.+34     	; 0x368 <initPWM1FastTopA+0xa0>
 346:	e1 e8       	ldi	r30, 0x81	; 129
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	84 60       	ori	r24, 0x04	; 4
 34e:	80 83       	st	Z, r24
 350:	0b c0       	rjmp	.+22     	; 0x368 <initPWM1FastTopA+0xa0>
 352:	e1 e8       	ldi	r30, 0x81	; 129
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	85 60       	ori	r24, 0x05	; 5
 35a:	80 83       	st	Z, r24
 35c:	05 c0       	rjmp	.+10     	; 0x368 <initPWM1FastTopA+0xa0>
 35e:	e1 e8       	ldi	r30, 0x81	; 129
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	85 60       	ori	r24, 0x05	; 5
 366:	80 83       	st	Z, r24
 368:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 36c:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 370:	08 95       	ret

00000372 <initPWM2FastB>:
 372:	9a b1       	in	r25, 0x0a	; 10
 374:	98 60       	ori	r25, 0x08	; 8
 376:	9a b9       	out	0x0a, r25	; 10
 378:	88 23       	and	r24, r24
 37a:	21 f0       	breq	.+8      	; 0x384 <initPWM2FastB+0x12>
 37c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 380:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 384:	e0 eb       	ldi	r30, 0xB0	; 176
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	80 62       	ori	r24, 0x20	; 32
 38c:	80 83       	st	Z, r24
 38e:	66 23       	and	r22, r22
 390:	19 f0       	breq	.+6      	; 0x398 <initPWM2FastB+0x26>
 392:	80 81       	ld	r24, Z
 394:	80 61       	ori	r24, 0x10	; 16
 396:	80 83       	st	Z, r24
 398:	e0 eb       	ldi	r30, 0xB0	; 176
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	83 60       	ori	r24, 0x03	; 3
 3a0:	80 83       	st	Z, r24
 3a2:	40 34       	cpi	r20, 0x40	; 64
 3a4:	51 05       	cpc	r21, r1
 3a6:	49 f1       	breq	.+82     	; 0x3fa <initPWM2FastB+0x88>
 3a8:	50 f4       	brcc	.+20     	; 0x3be <initPWM2FastB+0x4c>
 3aa:	48 30       	cpi	r20, 0x08	; 8
 3ac:	51 05       	cpc	r21, r1
 3ae:	c9 f0       	breq	.+50     	; 0x3e2 <initPWM2FastB+0x70>
 3b0:	40 32       	cpi	r20, 0x20	; 32
 3b2:	51 05       	cpc	r21, r1
 3b4:	e1 f0       	breq	.+56     	; 0x3ee <initPWM2FastB+0x7c>
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	51 05       	cpc	r21, r1
 3ba:	b9 f5       	brne	.+110    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3bc:	0c c0       	rjmp	.+24     	; 0x3d6 <initPWM2FastB+0x64>
 3be:	41 15       	cp	r20, r1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	58 07       	cpc	r21, r24
 3c4:	31 f1       	breq	.+76     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3c6:	41 15       	cp	r20, r1
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	58 07       	cpc	r21, r24
 3cc:	41 f1       	breq	.+80     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3ce:	40 38       	cpi	r20, 0x80	; 128
 3d0:	51 05       	cpc	r21, r1
 3d2:	59 f5       	brne	.+86     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3d4:	18 c0       	rjmp	.+48     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d6:	e1 eb       	ldi	r30, 0xB1	; 177
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	81 60       	ori	r24, 0x01	; 1
 3de:	80 83       	st	Z, r24
 3e0:	08 95       	ret
 3e2:	e1 eb       	ldi	r30, 0xB1	; 177
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	82 60       	ori	r24, 0x02	; 2
 3ea:	80 83       	st	Z, r24
 3ec:	08 95       	ret
 3ee:	e1 eb       	ldi	r30, 0xB1	; 177
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	83 60       	ori	r24, 0x03	; 3
 3f6:	80 83       	st	Z, r24
 3f8:	08 95       	ret
 3fa:	e1 eb       	ldi	r30, 0xB1	; 177
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	84 60       	ori	r24, 0x04	; 4
 402:	80 83       	st	Z, r24
 404:	08 95       	ret
 406:	e1 eb       	ldi	r30, 0xB1	; 177
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	85 60       	ori	r24, 0x05	; 5
 40e:	80 83       	st	Z, r24
 410:	08 95       	ret
 412:	e1 eb       	ldi	r30, 0xB1	; 177
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	86 60       	ori	r24, 0x06	; 6
 41a:	80 83       	st	Z, r24
 41c:	08 95       	ret
 41e:	e1 eb       	ldi	r30, 0xB1	; 177
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	87 60       	ori	r24, 0x07	; 7
 426:	80 83       	st	Z, r24
 428:	08 95       	ret
 42a:	e1 eb       	ldi	r30, 0xB1	; 177
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	87 60       	ori	r24, 0x07	; 7
 432:	80 83       	st	Z, r24
 434:	08 95       	ret

00000436 <initPWM0Fake>:
 436:	94 b1       	in	r25, 0x04	; 4
 438:	90 62       	ori	r25, 0x20	; 32
 43a:	94 b9       	out	0x04, r25	; 4
 43c:	14 bc       	out	0x24, r1	; 36
 43e:	15 bc       	out	0x25, r1	; 37
 440:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fakePWMcounter+0x1>
 444:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <fakePWMcounter>
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fakePWMduty+0x1>
 44e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fakePWMduty>
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <fakePWMtimertop+0x1>
 458:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <fakePWMtimertop>
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <fakePWMtop+0x1>
 462:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <fakePWMtop>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 46c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <fakePWMtimertop>
 470:	80 95       	com	r24
 472:	86 bd       	out	0x26, r24	; 38
 474:	20 34       	cpi	r18, 0x40	; 64
 476:	31 05       	cpc	r19, r1
 478:	c1 f0       	breq	.+48     	; 0x4aa <initPWM0Fake+0x74>
 47a:	38 f4       	brcc	.+14     	; 0x48a <initPWM0Fake+0x54>
 47c:	21 30       	cpi	r18, 0x01	; 1
 47e:	31 05       	cpc	r19, r1
 480:	61 f0       	breq	.+24     	; 0x49a <initPWM0Fake+0x64>
 482:	28 30       	cpi	r18, 0x08	; 8
 484:	31 05       	cpc	r19, r1
 486:	69 f0       	breq	.+26     	; 0x4a2 <initPWM0Fake+0x6c>
 488:	1c c0       	rjmp	.+56     	; 0x4c2 <initPWM0Fake+0x8c>
 48a:	21 15       	cp	r18, r1
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	38 07       	cpc	r19, r24
 490:	81 f0       	breq	.+32     	; 0x4b2 <initPWM0Fake+0x7c>
 492:	21 15       	cp	r18, r1
 494:	34 40       	sbci	r19, 0x04	; 4
 496:	89 f0       	breq	.+34     	; 0x4ba <initPWM0Fake+0x84>
 498:	14 c0       	rjmp	.+40     	; 0x4c2 <initPWM0Fake+0x8c>
 49a:	85 b5       	in	r24, 0x25	; 37
 49c:	81 60       	ori	r24, 0x01	; 1
 49e:	85 bd       	out	0x25, r24	; 37
 4a0:	08 95       	ret
 4a2:	85 b5       	in	r24, 0x25	; 37
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	85 bd       	out	0x25, r24	; 37
 4a8:	08 95       	ret
 4aa:	85 b5       	in	r24, 0x25	; 37
 4ac:	83 60       	ori	r24, 0x03	; 3
 4ae:	85 bd       	out	0x25, r24	; 37
 4b0:	08 95       	ret
 4b2:	85 b5       	in	r24, 0x25	; 37
 4b4:	84 60       	ori	r24, 0x04	; 4
 4b6:	85 bd       	out	0x25, r24	; 37
 4b8:	08 95       	ret
 4ba:	85 b5       	in	r24, 0x25	; 37
 4bc:	85 60       	ori	r24, 0x05	; 5
 4be:	85 bd       	out	0x25, r24	; 37
 4c0:	08 95       	ret
 4c2:	85 b5       	in	r24, 0x25	; 37
 4c4:	85 60       	ori	r24, 0x05	; 5
 4c6:	85 bd       	out	0x25, r24	; 37
 4c8:	08 95       	ret

000004ca <updateDutyCycle1A>:
 4ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4d2:	08 95       	ret

000004d4 <updateDutyCycle2B>:
}

void updateDutyCycle2B(uint8_t duty) {
	OCR2B = duty;
 4d4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 4d8:	08 95       	ret

000004da <updateDutyCycleFake>:
}

void updateDutyCycleFake(uint8_t duty) {
	fakePWMduty = duty;
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <fakePWMduty+0x1>
 4e0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <fakePWMduty>
 4e4:	08 95       	ret

000004e6 <_exit>:
 4e6:	f8 94       	cli

000004e8 <__stop_program>:
 4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <__stop_program>
