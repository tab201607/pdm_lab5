
Laboratorio5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000386  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  0000041c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c61  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000825  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084c  00000000  00000000  000019ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025c  00000000  00000000  000028b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002b11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9e:	0c 94 c1 01 	jmp	0x382	; 0x382 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
	}
}

void initADC(void) //Funcion para inicializar el ADC
{
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	ADMUX |= (1<<REFS0); //conectamos a AVcc
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b2:	80 81       	ld	r24, Z
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	80 83       	st	Z, r24
	
	ADMUX |= (1<<ADLAR); // Justificado a la izquierda
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN); //Encendemos el ADC
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
	ADCSRA |= (0b00000111); //Prescaler de 128
  ce:	80 81       	ld	r24, Z
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <setup>:
uint8_t ADCChannel = 6;


void setup(void)
{
	cli();
  d6:	f8 94       	cli
	
	CLKPR = (0b10000000); // habilitamos cambios del prescale	
  d8:	e1 e6       	ldi	r30, 0x61	; 97
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	80 83       	st	Z, r24
	CLKPR = (0x03); // Colocamos prescaler de 8
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	80 83       	st	Z, r24

	initPWM1FastTopA(reset, no_invertido, 8, 2499); //activamos el timer 0 con tiemo
  e4:	23 ec       	ldi	r18, 0xC3	; 195
  e6:	39 e0       	ldi	r19, 0x09	; 9
  e8:	48 e0       	ldi	r20, 0x08	; 8
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 02 01 	call	0x204	; 0x204 <initPWM1FastTopA>
	//initPWM2FastTop(no_invertido, 128, 156);
	initPWM2FastB(reset, no_invertido, 128);
  f4:	40 e8       	ldi	r20, 0x80	; 128
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 57 01 	call	0x2ae	; 0x2ae <initPWM2FastB>
	DDRD = 0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a b9       	out	0x0a, r24	; 10
	
	//UCSR0B = 0; // Deshablitamos serial en D0 y D1
	
	initADC();
 104:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	
	sei();
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <convertADC>:
	ADCSRA |= (1<<ADIE); // Encendemos el interrupt
	ADCSRA |= (0b00000111); //Prescaler de 128
}

void convertADC(char channel) //Funcion para leer info ADC
{	ADMUX &= ~(0x0F); // Borramos los ultimos 4 bits de ADMUX
 10c:	ec e7       	ldi	r30, 0x7C	; 124
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	90 7f       	andi	r25, 0xF0	; 240
 114:	90 83       	st	Z, r25
	
	if (channel > 8) {channel = 8;} //valor maximo es 8
 116:	89 30       	cpi	r24, 0x09	; 9
 118:	08 f0       	brcs	.+2      	; 0x11c <convertADC+0x10>
 11a:	88 e0       	ldi	r24, 0x08	; 8
	
	ADMUX |= channel; // seleccionamos el canal correcto
 11c:	ec e7       	ldi	r30, 0x7C	; 124
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	89 2b       	or	r24, r25
 124:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // iniciamos el ADC 
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <main>:
	sei();
}

int main(void)
{
	setup();
 132:	0e 94 6b 00 	call	0xd6	; 0xd6 <setup>
	updateDutyCycle1A(150);
 136:	86 e9       	ldi	r24, 0x96	; 150
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 b9 01 	call	0x372	; 0x372 <updateDutyCycle1A>
	updateDutyCycle2B(10);
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	0e 94 be 01 	call	0x37c	; 0x37c <updateDutyCycle2B>
	while (1)
	{
		ADCChannel = 6; //iniciamos el ADC convirtiendo el canal 6
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		convertADC(ADCChannel);
 14a:	0e 94 86 00 	call	0x10c	; 0x10c <convertADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	87 ea       	ldi	r24, 0xA7	; 167
 150:	91 e6       	ldi	r25, 0x61	; 97
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x20>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x26>
 158:	00 00       	nop
		_delay_ms(100);
		
		ADCChannel = 7; //iniciamos el ADC convirtiendo el canal 6
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		convertADC(ADCChannel);
 160:	0e 94 86 00 	call	0x10c	; 0x10c <convertADC>
 164:	87 ea       	ldi	r24, 0xA7	; 167
 166:	91 e6       	ldi	r25, 0x61	; 97
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x36>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x3c>
 16e:	00 00       	nop
 170:	e9 cf       	rjmp	.-46     	; 0x144 <main+0x12>

00000172 <__vector_21>:
	
	ADMUX |= channel; // seleccionamos el canal correcto
	ADCSRA |= (1<<ADSC); // iniciamos el ADC 
	}

ISR(ADC_vect){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	if (ADCChannel == 6) {ADCResultServo1 = ADCH + 65;}
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 198:	86 30       	cpi	r24, 0x06	; 6
 19a:	51 f4       	brne	.+20     	; 0x1b0 <__vector_21+0x3e>
 19c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	8f 5b       	subi	r24, 0xBF	; 191
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <ADCResultServo1+0x1>
 1aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADCResultServo1>
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <__vector_21+0x52>
	else if (ADCChannel == 7) {ADCResultServo2 = ADCH/8 + 7;}
 1b0:	87 30       	cpi	r24, 0x07	; 7
 1b2:	41 f4       	brne	.+16     	; 0x1c4 <__vector_21+0x52>
 1b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b8:	86 95       	lsr	r24
 1ba:	86 95       	lsr	r24
 1bc:	86 95       	lsr	r24
 1be:	89 5f       	subi	r24, 0xF9	; 249
 1c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	ADCSRA |= (1<<ADIF);
 1c4:	ea e7       	ldi	r30, 0x7A	; 122
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 61       	ori	r24, 0x10	; 16
 1cc:	80 83       	st	Z, r24
	
	updateDutyCycle1A(ADCResultServo1);
 1ce:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADCResultServo1>
 1d2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ADCResultServo1+0x1>
 1d6:	0e 94 b9 01 	call	0x372	; 0x372 <updateDutyCycle1A>
	updateDutyCycle2B(ADCResultServo2);
 1da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1de:	0e 94 be 01 	call	0x37c	; 0x37c <updateDutyCycle2B>
	
	return;
	
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <initPWM1FastTopA>:
void updateDutyCycle1A(uint16_t duty) {
	OCR1A = duty;
}

void updateDutyCycle2A(uint8_t duty) {
	OCR2A = duty;
 204:	94 b1       	in	r25, 0x04	; 4
 206:	92 60       	ori	r25, 0x02	; 2
 208:	94 b9       	out	0x04, r25	; 4
 20a:	88 23       	and	r24, r24
 20c:	21 f0       	breq	.+8      	; 0x216 <initPWM1FastTopA+0x12>
 20e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 212:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 216:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
 21a:	e0 e8       	ldi	r30, 0x80	; 128
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 68       	ori	r24, 0x80	; 128
 222:	80 83       	st	Z, r24
 224:	66 23       	and	r22, r22
 226:	19 f0       	breq	.+6      	; 0x22e <initPWM1FastTopA+0x2a>
 228:	80 81       	ld	r24, Z
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	80 83       	st	Z, r24
 22e:	e0 e8       	ldi	r30, 0x80	; 128
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8a 61       	ori	r24, 0x1A	; 26
 236:	80 83       	st	Z, r24
 238:	40 34       	cpi	r20, 0x40	; 64
 23a:	51 05       	cpc	r21, r1
 23c:	e1 f0       	breq	.+56     	; 0x276 <initPWM1FastTopA+0x72>
 23e:	38 f4       	brcc	.+14     	; 0x24e <initPWM1FastTopA+0x4a>
 240:	41 30       	cpi	r20, 0x01	; 1
 242:	51 05       	cpc	r21, r1
 244:	61 f0       	breq	.+24     	; 0x25e <initPWM1FastTopA+0x5a>
 246:	48 30       	cpi	r20, 0x08	; 8
 248:	51 05       	cpc	r21, r1
 24a:	79 f0       	breq	.+30     	; 0x26a <initPWM1FastTopA+0x66>
 24c:	26 c0       	rjmp	.+76     	; 0x29a <initPWM1FastTopA+0x96>
 24e:	41 15       	cp	r20, r1
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	58 07       	cpc	r21, r24
 254:	b1 f0       	breq	.+44     	; 0x282 <initPWM1FastTopA+0x7e>
 256:	41 15       	cp	r20, r1
 258:	54 40       	sbci	r21, 0x04	; 4
 25a:	c9 f0       	breq	.+50     	; 0x28e <initPWM1FastTopA+0x8a>
 25c:	1e c0       	rjmp	.+60     	; 0x29a <initPWM1FastTopA+0x96>
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	81 60       	ori	r24, 0x01	; 1
 266:	80 83       	st	Z, r24
 268:	1d c0       	rjmp	.+58     	; 0x2a4 <initPWM1FastTopA+0xa0>
 26a:	e1 e8       	ldi	r30, 0x81	; 129
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	82 60       	ori	r24, 0x02	; 2
 272:	80 83       	st	Z, r24
 274:	17 c0       	rjmp	.+46     	; 0x2a4 <initPWM1FastTopA+0xa0>
 276:	e1 e8       	ldi	r30, 0x81	; 129
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	83 60       	ori	r24, 0x03	; 3
 27e:	80 83       	st	Z, r24
 280:	11 c0       	rjmp	.+34     	; 0x2a4 <initPWM1FastTopA+0xa0>
 282:	e1 e8       	ldi	r30, 0x81	; 129
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	84 60       	ori	r24, 0x04	; 4
 28a:	80 83       	st	Z, r24
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <initPWM1FastTopA+0xa0>
 28e:	e1 e8       	ldi	r30, 0x81	; 129
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	85 60       	ori	r24, 0x05	; 5
 296:	80 83       	st	Z, r24
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <initPWM1FastTopA+0xa0>
 29a:	e1 e8       	ldi	r30, 0x81	; 129
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	85 60       	ori	r24, 0x05	; 5
 2a2:	80 83       	st	Z, r24
 2a4:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2a8:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2ac:	08 95       	ret

000002ae <initPWM2FastB>:
 2ae:	9a b1       	in	r25, 0x0a	; 10
 2b0:	98 60       	ori	r25, 0x08	; 8
 2b2:	9a b9       	out	0x0a, r25	; 10
 2b4:	88 23       	and	r24, r24
 2b6:	21 f0       	breq	.+8      	; 0x2c0 <initPWM2FastB+0x12>
 2b8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 2bc:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 2c0:	e0 eb       	ldi	r30, 0xB0	; 176
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	80 83       	st	Z, r24
 2ca:	66 23       	and	r22, r22
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <initPWM2FastB+0x26>
 2ce:	80 81       	ld	r24, Z
 2d0:	80 61       	ori	r24, 0x10	; 16
 2d2:	80 83       	st	Z, r24
 2d4:	e0 eb       	ldi	r30, 0xB0	; 176
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	83 60       	ori	r24, 0x03	; 3
 2dc:	80 83       	st	Z, r24
 2de:	40 34       	cpi	r20, 0x40	; 64
 2e0:	51 05       	cpc	r21, r1
 2e2:	49 f1       	breq	.+82     	; 0x336 <initPWM2FastB+0x88>
 2e4:	50 f4       	brcc	.+20     	; 0x2fa <initPWM2FastB+0x4c>
 2e6:	48 30       	cpi	r20, 0x08	; 8
 2e8:	51 05       	cpc	r21, r1
 2ea:	c9 f0       	breq	.+50     	; 0x31e <initPWM2FastB+0x70>
 2ec:	40 32       	cpi	r20, 0x20	; 32
 2ee:	51 05       	cpc	r21, r1
 2f0:	e1 f0       	breq	.+56     	; 0x32a <initPWM2FastB+0x7c>
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	51 05       	cpc	r21, r1
 2f6:	b9 f5       	brne	.+110    	; 0x366 <initPWM2FastB+0xb8>
 2f8:	0c c0       	rjmp	.+24     	; 0x312 <initPWM2FastB+0x64>
 2fa:	41 15       	cp	r20, r1
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	58 07       	cpc	r21, r24
 300:	31 f1       	breq	.+76     	; 0x34e <initPWM2FastB+0xa0>
 302:	41 15       	cp	r20, r1
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	58 07       	cpc	r21, r24
 308:	41 f1       	breq	.+80     	; 0x35a <initPWM2FastB+0xac>
 30a:	40 38       	cpi	r20, 0x80	; 128
 30c:	51 05       	cpc	r21, r1
 30e:	59 f5       	brne	.+86     	; 0x366 <initPWM2FastB+0xb8>
 310:	18 c0       	rjmp	.+48     	; 0x342 <initPWM2FastB+0x94>
 312:	e1 eb       	ldi	r30, 0xB1	; 177
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
 31c:	08 95       	ret
 31e:	e1 eb       	ldi	r30, 0xB1	; 177
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	82 60       	ori	r24, 0x02	; 2
 326:	80 83       	st	Z, r24
 328:	08 95       	ret
 32a:	e1 eb       	ldi	r30, 0xB1	; 177
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	83 60       	ori	r24, 0x03	; 3
 332:	80 83       	st	Z, r24
 334:	08 95       	ret
 336:	e1 eb       	ldi	r30, 0xB1	; 177
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	84 60       	ori	r24, 0x04	; 4
 33e:	80 83       	st	Z, r24
 340:	08 95       	ret
 342:	e1 eb       	ldi	r30, 0xB1	; 177
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	85 60       	ori	r24, 0x05	; 5
 34a:	80 83       	st	Z, r24
 34c:	08 95       	ret
 34e:	e1 eb       	ldi	r30, 0xB1	; 177
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	86 60       	ori	r24, 0x06	; 6
 356:	80 83       	st	Z, r24
 358:	08 95       	ret
 35a:	e1 eb       	ldi	r30, 0xB1	; 177
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	87 60       	ori	r24, 0x07	; 7
 362:	80 83       	st	Z, r24
 364:	08 95       	ret
 366:	e1 eb       	ldi	r30, 0xB1	; 177
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	87 60       	ori	r24, 0x07	; 7
 36e:	80 83       	st	Z, r24
 370:	08 95       	ret

00000372 <updateDutyCycle1A>:
 372:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 376:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 37a:	08 95       	ret

0000037c <updateDutyCycle2B>:
}

void updateDutyCycle2B(uint8_t duty) {
	OCR2B = duty;
 37c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
